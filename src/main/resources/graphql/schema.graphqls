scalar Date

type Mutation {
    createMerchant(merchant:CreateMerchant): ReadMerchant
}

type Query {
    getMerchants: [ReadMerchant]
    getMerchantId(id:ID): ReadMerchant
}

type ReadMerchant implements ReadBaseEntity{
    id: ID
    name: String
    surname: String
    taxNumber: String!
    identityNumber: String!
    companyType: CompanyType!
    address: ReadAddress
    contacts: [ReadContact]
    ipAddress: String
    createdAt: Date
}

type ReadContact {
    id: ID
    name: String
    surname: String
    email: String
    phone: String
}

type ReadAddress {
    id: ID
    country: String
    city: String
    zipCode: String
    street: String
}

interface ReadBaseEntity {
    ipAddress: String
    createdAt: Date
}

input CreateMerchant {
    name: String!
    surname: String!
    taxNumber: String!
    identityNumber: String!
    companyType: CompanyType!
    address: CreateAddress
    contacts: [CreateContact]
}

input CreateContact {
    name: String!
    surname: String!
    email: String!
    phone: String!
}

input CreateAddress {
    country: String!
    city: String!
    zipCode: String!
    street: String!
}

enum CompanyType {
    INDIVIDUAL,
    COOPERATIVE
}